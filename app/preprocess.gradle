import groovy.io.FileType

def resRaw = 'src/main/res/raw'

configurations {
}

dependencies {
}

android {
}

task preprocess {
    doLast {
        def processModule = {
            println "generate resources for ${it.name}"

            def moddata = "${it.canonicalPath}"
            def module = "${it.name}"

            //noinspection GroovyUnusedAssignment
            def (modcode, modname) = "$module".tokenize('-')

            exec {
                executable '../util/libmake'
                args "$moddata", "$resRaw", "$modcode"
            }
        }

        def processProgram = {
            println "generate resources for ${it.name}"

            def progdata = "${it.canonicalPath}"
            def module = "${it.name}"

            if(it.name == "demo_card_store")
            {
                exec {
                    executable '../util/makeprog'
                    args "${resRaw}/${module}.ti5p",
                            "help00=$progdata/help",
                            "cardsrc00=$progdata/card",
                            "progsrc00=$progdata/prog",
                            "banksrc9004=$progdata/bank04",
                            "banksrc9014=$progdata/bank14",
                            "mem9003=$progdata/mem03",
                            "mem9013=$progdata/mem13"
                }
            }
            else {
                exec {
                    executable '../util/makeprog'
                    args "${resRaw}/${module}.ti5p",
                            "help00=$progdata/help",
                            "cardsrc00=$progdata/card",
                            "progsrc00=$progdata/prog"
                }
            }
        }

        // handle modules

        def moduleDir = "${projectDir}/../modules"
        def mDir = new File(moduleDir)

        mDir.eachFileRecurse(FileType.DIRECTORIES) {
            file -> processModule file
        }

        // handle programs

        def programDir = "${projectDir}/../programs"
        def pDir = new File(programDir)

        pDir.eachFileRecurse(FileType.DIRECTORIES) {
            file -> processProgram file
        }
    }
}

task customClean(type: Delete) {
    doLast {
        def mDir = new File("${projectDir}/$resRaw")

        def deleteModule = {
            if (it.name.endsWith('.ti5l') || it.name.endsWith('.ti5p')) {
                project.delete "${it.canonicalPath}"
            }
        }

        mDir.eachFileRecurse(FileType.FILES) {
            file -> deleteModule file
        }
    }
}

clean.dependsOn customClean
preBuild.dependsOn preprocess
